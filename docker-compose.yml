version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: microservices-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservices-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: microservices-redis
    ports:
      - "6379:6379"
    networks:
      - microservices-network

  # API Gateway
  gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    container_name: microservices-gateway
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - JWT_SECRET=your-super-secret-jwt-key-here
      - API_KEY=your-api-key-here
      - DATABASE_URL=mongodb://admin:password123@mongodb:27017/microservices?authSource=admin
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb
      - redis
      - user-service
      - product-service
      - order-service
      - notification-service
    networks:
      - microservices-network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: .
      dockerfile: Dockerfile.user-service
    container_name: microservices-user-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - JWT_SECRET=your-super-secret-jwt-key-here
      - DATABASE_URL=mongodb://admin:password123@mongodb:27017/users?authSource=admin
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - microservices-network
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: Dockerfile.product-service
    container_name: microservices-product-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mongodb://admin:password123@mongodb:27017/products?authSource=admin
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - microservices-network
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: Dockerfile.order-service
    container_name: microservices-order-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mongodb://admin:password123@mongodb:27017/orders?authSource=admin
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3002
      - PRODUCT_SERVICE_URL=http://product-service:3003
      - NOTIFICATION_SERVICE_URL=http://notification-service:3005
    depends_on:
      - mongodb
      - redis
      - user-service
      - product-service
      - notification-service
    networks:
      - microservices-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: Dockerfile.notification-service
    container_name: microservices-notification-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mongodb://admin:password123@mongodb:27017/notifications?authSource=admin
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - microservices-network
    restart: unless-stopped

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    container_name: microservices-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - gateway
    networks:
      - microservices-network
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local